<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\M32_Control.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\M32_Control.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Mon May 21 09:04:43 2018
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; start_pet &rArr; Gpu_DisplayCfg &rArr; GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from externalintwithgpu.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">Initial_LCM_1080x1920_OppoR9_Oled</a> from lcd_cfg_1080x1920_oppor9_oled.o(i.Initial_LCM_1080x1920_OppoR9_Oled) referenced from user_config.o(.constdata)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from dbg_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">fputc</a> from redef_print.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[51]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[150]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[151]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[52]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[66]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[54]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[153]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[5b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[155]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[56]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[156]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[157]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[158]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[159]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[160]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[164]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[165]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[166]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[167]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[60]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[50]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[58]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; start_pet &rArr; Gpu_DisplayCfg &rArr; GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[170]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[171]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[61]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[74]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[172]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBPB_Param
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_phase
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_lock_lookup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_filter_lookup
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_divider
</UL>

<P><STRONG><a name="[65]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[55]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[173]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[57]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[174]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[64]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[69]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6a]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[59]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[179]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>Address_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd240x320.o(i.Address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Logo_Disp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[71]"></a>Arm_Connect_Mcu</STRONG> (Thumb, 380 bytes, Stack size 96 bytes, boardandcoreinf.o(i.Arm_Connect_Mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Arm_Connect_Mcu &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Hex_2_Ascii
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_GetCrcSum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Delay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Asccii_2_Hex
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[79]"></a>Arm_Get_Current</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, boardandcoreinf.o(i.Arm_Get_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Arm_Get_Current &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Hex_2_Ascii
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_GetCrcSum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Delay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Asccii_2_Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pat1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_ID
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_Curr
</UL>

<P><STRONG><a name="[7a]"></a>Arm_Set_BZ</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, boardandcoreinf.o(i.Arm_Set_BZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Arm_Set_BZ &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Beep
</UL>

<P><STRONG><a name="[83]"></a>CM_GPU_CommandModeEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpu_cfg.o(i.CM_GPU_CommandModeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
</UL>

<P><STRONG><a name="[7c]"></a>CM_GPU_CommandMode_Control</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpu_cfg.o(i.CM_GPU_CommandMode_Control))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>

<P><STRONG><a name="[80]"></a>CM_GPU_CommandMode_ReadControl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpu_cfg.o(i.CM_GPU_CommandMode_ReadControl))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
</UL>

<P><STRONG><a name="[87]"></a>CM_GPU_CommandMode_ReadData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpu_cfg.o(i.CM_GPU_CommandMode_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>

<P><STRONG><a name="[7e]"></a>CM_GPU_CommandMode_WriteData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpu_cfg.o(i.CM_GPU_CommandMode_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>

<P><STRONG><a name="[7b]"></a>CommandMode_GPUWholeFrame_FastWrite</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gpu_cfg.o(i.CommandMode_GPUWholeFrame_FastWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandMode_GPUWholeFrame_FastWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_WriteData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_ReadControl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[81]"></a>CommandMode_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpu_cfg.o(i.CommandMode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandMode_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_RESET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCM_TP_RES
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_Control
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandModeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[85]"></a>CommandMode_Read</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gpu_cfg.o(i.CommandMode_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommandMode_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_WriteData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_ReadData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ssd2828_ID_OK_check_CmdMode
</UL>

<P><STRONG><a name="[88]"></a>CommandMode_Write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gpu_cfg.o(i.CommandMode_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommandMode_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_WriteData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GPU_CommandMode_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLcdParameterConfig_CmdMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LCM_1080x1920_OppoR9_Oled
</UL>

<P><STRONG><a name="[89]"></a>DBG_UART_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, dbg_uart.o(i.DBG_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DBG_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockStructInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opSetBaudRate
</UL>

<P><STRONG><a name="[128]"></a>DBG_UART_TxChar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dbg_uart.o(i.DBG_UART_TxChar))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendBuffer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8f]"></a>DISP_WINDOWS</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd240x320.o(i.DISP_WINDOWS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DISP_WINDOWS &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Window
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Frame
</UL>

<P><STRONG><a name="[90]"></a>Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pport_spi.o(i.Delay))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LCM_1080x1920_OppoR9_Oled
</UL>

<P><STRONG><a name="[91]"></a>Delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pport_spi.o(i.Delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[92]"></a>DisableEBindingPin_OutputDriving</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_gpio_def.o(i.DisableEBindingPin_OutputDriving))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DisableEBindingPin_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
</UL>

<P><STRONG><a name="[94]"></a>DisableGPU_SPI_FLASH_OutputDriving</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_gpio_def.o(i.DisableGPU_SPI_FLASH_OutputDriving))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DisableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
</UL>

<P><STRONG><a name="[95]"></a>DispHexChar</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lcd240x320.o(i.DispHexChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DispHexChar &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[97]"></a>DispNumber</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, lcd240x320.o(i.DispNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DispNumber &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pat1
</UL>

<P><STRONG><a name="[98]"></a>Disp_Frame</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lcd240x320.o(i.Disp_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Disp_Frame &rArr; DISP_WINDOWS &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_WINDOWS
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pat1
</UL>

<P><STRONG><a name="[99]"></a>Disp_Window</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lcd240x320.o(i.Disp_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Disp_Window &rArr; DISP_WINDOWS &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_WINDOWS
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[9a]"></a>DisplayBMP</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, fat32sys_forfastfiforead.o(i.DisplayBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk_to_FIFO
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, externalintwithgpu.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GPIO_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>EXTI_GPIO_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, externalintwithgpu.o(i.EXTI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI_GPIO_Init &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[9c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GPIO_Init
</UL>

<P><STRONG><a name="[a1]"></a>EnableEBindingPin_OutputDriving</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_gpio_def.o(i.EnableEBindingPin_OutputDriving))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EnableEBindingPin_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
</UL>

<P><STRONG><a name="[a2]"></a>EnableGPU_SPI_FLASH_OutputDriving</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, user_gpio_def.o(i.EnableGPU_SPI_FLASH_OutputDriving))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EnableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
</UL>

<P><STRONG><a name="[a3]"></a>ExtractBPB_Param</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fat32sys_forfastfiforead.o(i.ExtractBPB_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ExtractBPB_Param &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[ed]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GPU_FSMCConfig
</UL>

<P><STRONG><a name="[ec]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GPU_FSMCConfig
</UL>

<P><STRONG><a name="[a5]"></a>FindALLBMP_Entry</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fat32sys_forfastfiforead.o(i.FindALLBMP_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FindALLBMP_Entry &rArr; SD_ReadDisk &rArr; SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_Configuration</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, user_gpio_def.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Configuration &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GPIO_Init
</UL>

<P><STRONG><a name="[93]"></a>GPIO_Init</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPU_SPI_FLASH_OutputDriving
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEBindingPin_OutputDriving
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGPU_SPI_FLASH_OutputDriving
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEBindingPin_OutputDriving
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Init
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPU_StartUpBoot_Done
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_TestAck
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Get_MISO
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Write8Bit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_TestAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Stop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Start
</UL>

<P><STRONG><a name="[12b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Write8Bit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_TestAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Stop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Start
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_SDI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CLK
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_RESET
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDVCC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDIOVCC
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_BL_PWM
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_GPU_StartUpBoot_ResetN
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_SCK
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_MOSI
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_CS
</UL>

<P><STRONG><a name="[146]"></a>GPU_Connection_Check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpu_cfg.o(i.GPU_Connection_Check))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[147]"></a>GPU_LogicWorkStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpu_cfg.o(i.GPU_LogicWorkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[a9]"></a>GPU_SPI_Config_Process</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.GPU_SPI_Config_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPU_SPI_Config_Process &rArr; opSetBaudRate &rArr; DBG_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opSetBaudRate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opProgammerPage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashSectorErase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashProgramExit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInitErrorProcess
</UL>

<P><STRONG><a name="[af]"></a>GPU_set_PLL_factor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpu_cfg.o(i.GPU_set_PLL_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_reconfig_pll
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_DisplayCfg
</UL>

<P><STRONG><a name="[148]"></a>Get_GPU_DateTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpu_cfg.o(i.Get_GPU_DateTime))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[149]"></a>Get_GPU_Version</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpu_cfg.o(i.Get_GPU_Version))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[b1]"></a>Get_Sys_Curr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardandcoreinf.o(i.Get_Sys_Curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Get_Sys_Curr &rArr; Arm_Get_Current &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[b2]"></a>Get_Sys_ID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boardandcoreinf.o(i.Get_Sys_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Get_Sys_ID &rArr; Arm_Get_Current &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[b3]"></a>GpuSpiFlash_SectorErase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpu_spi_flash_cfg.o(i.GpuSpiFlash_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpuSpiFlash_SectorErase &rArr; M25P80_Section_Erase &rArr; M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashSectorErase
</UL>

<P><STRONG><a name="[b5]"></a>Gpu_DisplayCfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, gpu_cfg.o(i.Gpu_DisplayCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Gpu_DisplayCfg &rArr; GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_set_PLL_factor
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[b6]"></a>I_GPU_StartUpBoot_Done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_gpio_def.o(i.I_GPU_StartUpBoot_Done))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[b8]"></a>Init_IO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app.o(i.Init_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_IO &rArr; init_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ba]"></a>Init_System</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, boardandcoreinf.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Init_System &rArr; Get_Sys_ID &rArr; Arm_Get_Current &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IO
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GPU_FSMCConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_ID
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_Curr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Initial_LCM_1080x1920_OppoR9_Oled</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, lcd_cfg_1080x1920_oppor9_oled.o(i.Initial_LCM_1080x1920_OppoR9_Oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Initial_LCM_1080x1920_OppoR9_Oled &rArr; LoadLcdParameterConfig_CmdMode &rArr; CommandMode_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLcdParameterConfig_CmdMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_config.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>KeyAuto_Process</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.KeyAuto_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = KeyAuto_Process &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>KeyDown_Process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.KeyDown_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = KeyDown_Process &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>KeyOTP_Process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.KeyOTP_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = KeyOTP_Process &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>KeyUp_Process</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.KeyUp_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = KeyUp_Process &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>LCD_Clear</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd240x320.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_Clear &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
</UL>

<P><STRONG><a name="[6f]"></a>LCD_CtrlWrite</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd240x320.o(i.LCD_CtrlWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_CtrlWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_SDI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_SCK
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_CS
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_WINDOWS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[70]"></a>LCD_DataWrite</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd240x320.o(i.LCD_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_SDI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_SCK
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_CS
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Window
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Frame
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISP_WINDOWS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>

<P><STRONG><a name="[cc]"></a>LCD_DrawPoint</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd240x320.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[ce]"></a>LCD_Logo_Disp</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd240x320.o(i.LCD_Logo_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_Logo_Disp &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[96]"></a>LCD_ShowChar</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lcd240x320.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Address_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNumber
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHexChar
</UL>

<P><STRONG><a name="[c2]"></a>LCD_ShowString</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lcd240x320.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pat1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInitErrorProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Process
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyUp_Process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOTP_Process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDown_Process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto_Process
</UL>

<P><STRONG><a name="[cd]"></a>LCD_WR_DATA</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd240x320.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_WR_DATA &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Logo_Disp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[cb]"></a>LCD_Write</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, lcd240x320.o(i.LCD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>

<P><STRONG><a name="[cf]"></a>Lcd240x320_Init</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, lcd240x320.o(i.Lcd240x320_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Lcd240x320_Init &rArr; LCD_Clear &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_REST
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_LCD240x320_CS
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>Lcd_ShowMode</STRONG> (Thumb, 780 bytes, Stack size 40 bytes, app.o(i.Lcd_ShowMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternPureColorThroughDDR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleV
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleH
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerOneDot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerColumnInversion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternCrosstalk_BlackWhite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternColorOutline
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternChecker_BlackWhite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarV_BBRGWCYM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarH_BBRGWCYM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleV
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleH
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyUp_Process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDown_Process
</UL>

<P><STRONG><a name="[c0]"></a>LoadLcdParameterConfig_CmdMode</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, pport_spi.o(i.LoadLcdParameterConfig_CmdMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoadLcdParameterConfig_CmdMode &rArr; CommandMode_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LCM_1080x1920_OppoR9_Oled
</UL>

<P><STRONG><a name="[dd]"></a>M25P80_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M25P80_Busy &rArr; M25P80_CMD1B_READ1B
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[df]"></a>M25P80_CLOSE</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_CLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M25P80_CLOSE &rArr; DisableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_GPU_StartUpBoot_ResetN
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGPU_SPI_FLASH_OutputDriving
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashProgramExit
</UL>

<P><STRONG><a name="[e3]"></a>M25P80_CMD1B</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_CMD1B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M25P80_CMD1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
</UL>

<P><STRONG><a name="[de]"></a>M25P80_CMD1B_READ1B</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_CMD1B_READ1B))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M25P80_CMD1B_READ1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
</UL>

<P><STRONG><a name="[e6]"></a>M25P80_CMD1B_S1B</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m25p80.o(i.M25P80_CMD1B_S1B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
</UL>

<P><STRONG><a name="[e7]"></a>M25P80_OPEN</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, m25p80.o(i.M25P80_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = M25P80_OPEN &rArr; EnableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_GPU_StartUpBoot_ResetN
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPU_SPI_FLASH_OutputDriving
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashSectorErase
</UL>

<P><STRONG><a name="[b4]"></a>M25P80_Section_Erase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m25p80.o(i.M25P80_Section_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M25P80_Section_Erase &rArr; M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSpiFlash_SectorErase
</UL>

<P><STRONG><a name="[ea]"></a>M25P80_WP_En</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_WP_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
</UL>

<P><STRONG><a name="[eb]"></a>M25P80_Write_Bytes</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, m25p80.o(i.M25P80_Write_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M25P80_Write_Bytes &rArr; M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_M25P80_SPI_CSN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opProgammerPage
</UL>

<P><STRONG><a name="[e9]"></a>M25P80_Write_En</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m25p80.o(i.M25P80_Write_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[bb]"></a>MCU_GPU_FSMCConfig</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, mcu_gpu_fsmc.o(i.MCU_GPU_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MCU_GPU_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[bc]"></a>NVIC_Configuration</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, timer.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ef]"></a>NVIC_Init</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>O_GPU_StartUpBoot_ResetN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_GPU_StartUpBoot_ResetN))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
</UL>

<P><STRONG><a name="[c9]"></a>O_LCD240x320_CS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_LCD240x320_CS))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>

<P><STRONG><a name="[d0]"></a>O_LCD240x320_REST</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_LCD240x320_REST))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
</UL>

<P><STRONG><a name="[c8]"></a>O_LCD240x320_SCK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_LCD240x320_SCK))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>

<P><STRONG><a name="[ca]"></a>O_LCD240x320_SDI</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_LCD240x320_SDI))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CtrlWrite
</UL>

<P><STRONG><a name="[82]"></a>O_LCM_TP_RES</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpu_cfg.o(i.O_LCM_TP_RES))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
</UL>

<P><STRONG><a name="[e4]"></a>O_M25P80_SPI_CSN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_M25P80_SPI_CSN))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>

<P><STRONG><a name="[fc]"></a>O_PWR_BL_EN</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpu_cfg.o(i.O_PWR_BL_EN))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[f1]"></a>O_PWR_BL_PWM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_PWR_BL_PWM))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[f2]"></a>O_PWR_EN_LCDIOVCC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_PWR_EN_LCDIOVCC))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[f3]"></a>O_PWR_EN_LCDVCC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_PWR_EN_LCDVCC))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[fa]"></a>O_PWR_EN_VSN</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpu_cfg.o(i.O_PWR_EN_VSN))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[fb]"></a>O_PWR_EN_VSP</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpu_cfg.o(i.O_PWR_EN_VSP))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
</UL>

<P><STRONG><a name="[84]"></a>O_SSD2828_RESET</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_SSD2828_RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_lcd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
</UL>

<P><STRONG><a name="[f4]"></a>O_SSD2828_SPI_CLK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_SSD2828_SPI_CLK))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[7d]"></a>O_SSD2828_SPI_CS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_SSD2828_SPI_CS))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>

<P><STRONG><a name="[f5]"></a>O_SSD2828_SPI_SDI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_gpio_def.o(i.O_SSD2828_SPI_SDI))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[f6]"></a>PowerOff_Process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.PowerOff_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = PowerOff_Process &rArr; Power_Off &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Off
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>PowerOn_Process</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.PowerOn_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PowerOn_Process &rArr; Power_On &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>Power_Off</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, power_task.o(i.Power_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Power_Off &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDVCC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDIOVCC
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_BL_PWM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_VSP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_VSN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_BL_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Process
</UL>

<P><STRONG><a name="[f9]"></a>Power_On</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, power_task.o(i.Power_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Power_On &rArr; Lcd_ShowMode &rArr; DisplayBMP &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDVCC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_LCDIOVCC
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_BL_PWM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_SetVSPVoltage
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_SetVSNVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_OutOn
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_VSP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_EN_VSN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_PWR_BL_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Process
</UL>

<P><STRONG><a name="[101]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[100]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[120]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
</UL>

<P><STRONG><a name="[11e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[e2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
</UL>

<P><STRONG><a name="[11f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[a7]"></a>RCC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_gpio_def.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[127]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[bf]"></a>Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pport_spi.o(i.Reset))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initial_LCM_1080x1920_OppoR9_Oled
</UL>

<P><STRONG><a name="[102]"></a>Respond</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpu_spi_flash_cfg.o(i.Respond))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Respond &rArr; Uart1SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendBuffer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opSetBaudRate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opProgammerPage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashSectorErase
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashProgramExit
</UL>

<P><STRONG><a name="[104]"></a>SD_IP_Card_Init</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, sd.o(i.SD_IP_Card_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_IP_Card_Init &rArr; SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Wait_Clock_Change_Done
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Non_Data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Config_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[105]"></a>SD_IP_Config_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sd.o(i.SD_IP_Config_Init))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Card_Init
</UL>

<P><STRONG><a name="[108]"></a>SD_IP_Send_Cmd_Has_Data</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, sd.o(i.SD_IP_Send_Cmd_Has_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Wait_Status_Reg_Clear_Done
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Wait_Data_Done
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Wait_Cmd_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Card_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk_to_FIFO
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[106]"></a>SD_IP_Send_Cmd_Non_Data</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, sd.o(i.SD_IP_Send_Cmd_Non_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SD_IP_Send_Cmd_Non_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Wait_Cmd_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Card_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk_to_FIFO
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[107]"></a>SD_IP_Wait_Clock_Change_Done</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sd.o(i.SD_IP_Wait_Clock_Change_Done))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Card_Init
</UL>

<P><STRONG><a name="[109]"></a>SD_IP_Wait_Cmd_Done</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sd.o(i.SD_IP_Wait_Cmd_Done))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Non_Data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
</UL>

<P><STRONG><a name="[10a]"></a>SD_IP_Wait_Data_Done</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sd.o(i.SD_IP_Wait_Data_Done))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
</UL>

<P><STRONG><a name="[10b]"></a>SD_IP_Wait_Status_Reg_Clear_Done</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sd.o(i.SD_IP_Wait_Status_Reg_Clear_Done))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
</UL>

<P><STRONG><a name="[a4]"></a>SD_ReadDisk</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, sd.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_ReadDisk &rArr; SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Non_Data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindALLBMP_Entry
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBPB_Param
</UL>

<P><STRONG><a name="[9b]"></a>SD_ReadDisk_to_FIFO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sd.o(i.SD_ReadDisk_to_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_ReadDisk_to_FIFO &rArr; SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Non_Data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Send_Cmd_Has_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
</UL>

<P><STRONG><a name="[e1]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
</UL>

<P><STRONG><a name="[e5]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m25p80.o(i.SPI_FLASH_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>

<P><STRONG><a name="[10c]"></a>SPI_Flash_EncryptBinding_Process</STRONG> (Thumb, 662 bytes, Stack size 64 bytes, spi_flash_bindingencrypt.o(i.SPI_Flash_EncryptBinding_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SPI_Flash_EncryptBinding_Process &rArr; M25P80_OPEN &rArr; EnableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEBindingPin_OutputDriving
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEBindingPin_OutputDriving
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInitErrorProcess
</UL>

<P><STRONG><a name="[e8]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
</UL>

<P><STRONG><a name="[10d]"></a>Show_Curr</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gpu_cfg.o(i.Show_Curr))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Show_Curr &rArr; DispNumber &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNumber
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_Curr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>Ssd2828_ID_OK_check_CmdMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pport_spi.o(i.Ssd2828_ID_OK_check_CmdMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ssd2828_ID_OK_check_CmdMode &rArr; CommandMode_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[112]"></a>SysInitErrorProcess</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.SysInitErrorProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SysInitErrorProcess &rArr; SPI_Flash_EncryptBinding_Process &rArr; M25P80_OPEN &rArr; EnableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[113]"></a>Sys_Beep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boardandcoreinf.o(i.Sys_Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sys_Beep &rArr; Arm_Set_BZ &rArr; lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Set_BZ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM8_PWM_Configuration</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, timer.o(i.TIM8_PWM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM8_PWM_Configuration &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
</UL>

<P><STRONG><a name="[116]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
</UL>

<P><STRONG><a name="[115]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
</UL>

<P><STRONG><a name="[119]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
</UL>

<P><STRONG><a name="[11a]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
</UL>

<P><STRONG><a name="[118]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>Timer2_Configuration</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timer.o(i.Timer2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer2_Configuration &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[123]"></a>Timer2_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer2_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>Timer3_Configuration</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timer.o(i.Timer3_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer3_Configuration &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[124]"></a>Timer3_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer3_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbg_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; Uart1RecProc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RecProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClockStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
</UL>

<P><STRONG><a name="[8e]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
</UL>

<P><STRONG><a name="[8d]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
</UL>

<P><STRONG><a name="[8c]"></a>USART_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
</UL>

<P><STRONG><a name="[126]"></a>Uart1RecProc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, dbg_uart.o(i.Uart1RecProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart1RecProc
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>Uart1SendBuffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dbg_uart.o(i.Uart1SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_TxChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
</UL>

<P><STRONG><a name="[129]"></a>VSPN_I2C_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c.o(i.VSPN_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VSPN_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[12a]"></a>VSPN_I2C_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c.o(i.VSPN_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSPN_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>

<P><STRONG><a name="[12d]"></a>VSPN_I2C_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c.o(i.VSPN_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSPN_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>

<P><STRONG><a name="[12e]"></a>VSPN_I2C_TestAck</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c.o(i.VSPN_I2C_TestAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VSPN_I2C_TestAck
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>

<P><STRONG><a name="[12f]"></a>VSPN_I2C_Write8Bit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c.o(i.VSPN_I2C_Write8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VSPN_I2C_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>

<P><STRONG><a name="[ff]"></a>VSPN_OutOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vspn_ctrl.o(i.VSPN_OutOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSPN_OutOn &rArr; VSPN_WriteReg &rArr; VSPN_I2C_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
</UL>

<P><STRONG><a name="[fd]"></a>VSPN_SetVSNVoltage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vspn_ctrl.o(i.VSPN_SetVSNVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSPN_SetVSNVoltage &rArr; VSPN_WriteReg &rArr; VSPN_I2C_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
</UL>

<P><STRONG><a name="[fe]"></a>VSPN_SetVSPVoltage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vspn_ctrl.o(i.VSPN_SetVSPVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSPN_SetVSPVoltage &rArr; VSPN_WriteReg &rArr; VSPN_I2C_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_On
</UL>

<P><STRONG><a name="[aa]"></a>Xor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.Xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
</UL>

<P><STRONG><a name="[62]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, redef_print.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[7f]"></a>delayms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tools.o(i.delayms))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_GPUWholeFrame_FastWrite
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_lcd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Beep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opSetBaudRate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opGpuSpiFlashSectorErase
</UL>

<P><STRONG><a name="[86]"></a>delayus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tools.o(i.delayus))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_DisplayCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Read
</UL>

<P><STRONG><a name="[4b]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, redef_print.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_TxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>gpu_pll_count_calc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pll_drp_func.o(i.gpu_pll_count_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = gpu_pll_count_calc &rArr; gpu_pll_phase &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_phase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_reconfig_pll
</UL>

<P><STRONG><a name="[132]"></a>gpu_pll_divider</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pll_drp_func.o(i.gpu_pll_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = gpu_pll_divider &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_round_frac
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_count_calc
</UL>

<P><STRONG><a name="[135]"></a>gpu_pll_filter_lookup</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, pll_drp_func.o(i.gpu_pll_filter_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = gpu_pll_filter_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_reconfig_pll
</UL>

<P><STRONG><a name="[136]"></a>gpu_pll_lock_lookup</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, pll_drp_func.o(i.gpu_pll_lock_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_reconfig_pll
</UL>

<P><STRONG><a name="[133]"></a>gpu_pll_phase</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pll_drp_func.o(i.gpu_pll_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = gpu_pll_phase &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_round_frac
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_count_calc
</UL>

<P><STRONG><a name="[b0]"></a>gpu_reconfig_pll</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, pll_drp_func.o(i.gpu_reconfig_pll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_lock_lookup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_filter_lookup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_count_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_set_PLL_factor
</UL>

<P><STRONG><a name="[134]"></a>gpu_round_frac</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pll_drp_func.o(i.gpu_round_frac))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_phase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpu_pll_divider
</UL>

<P><STRONG><a name="[b9]"></a>init_spi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pport_spi.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_SDI
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_SPI_CLK
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IO
</UL>

<P><STRONG><a name="[78]"></a>lib_Asccii_2_Hex</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_Asccii_2_Hex))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[73]"></a>lib_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Set_BZ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[75]"></a>lib_GetCrcSum</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, boardandcoreinf.o(i.lib_GetCrcSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lib_GetCrcSum
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[76]"></a>lib_Hex_2_Ascii</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_Hex_2_Ascii))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[137]"></a>lib_SPI1_Get_MISO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_SPI1_Get_MISO))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
</UL>

<P><STRONG><a name="[72]"></a>lib_SPI1_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boardandcoreinf.o(i.lib_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lib_SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Set_BZ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[77]"></a>lib_SPI1_RW</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, boardandcoreinf.o(i.lib_SPI1_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lib_SPI1_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_SCK
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_MOSI
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Set_CS
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_Get_MISO
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Set_BZ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Connect_Mcu
</UL>

<P><STRONG><a name="[138]"></a>lib_SPI1_Set_CS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_SPI1_Set_CS))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
</UL>

<P><STRONG><a name="[139]"></a>lib_SPI1_Set_MOSI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_SPI1_Set_MOSI))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
</UL>

<P><STRONG><a name="[13a]"></a>lib_SPI1_Set_SCK</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, boardandcoreinf.o(i.lib_SPI1_Set_SCK))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_SPI1_RW
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = main &rArr; start_pet &rArr; Gpu_DisplayCfg &rArr; GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_PWM_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_EncryptBinding_Process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd240x320_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pat1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn_Process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Process
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyUp_Process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyOTP_Process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDown_Process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto_Process
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>opGpuSpiFlashProgramExit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.opGpuSpiFlashProgramExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = opGpuSpiFlashProgramExit &rArr; M25P80_CLOSE &rArr; DisableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CLOSE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
</UL>

<P><STRONG><a name="[ac]"></a>opGpuSpiFlashSectorErase</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.opGpuSpiFlashSectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = opGpuSpiFlashSectorErase &rArr; M25P80_OPEN &rArr; EnableGPU_SPI_FLASH_OutputDriving &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_OPEN
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpuSpiFlash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
</UL>

<P><STRONG><a name="[ad]"></a>opProgammerPage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.opProgammerPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = opProgammerPage &rArr; M25P80_Write_Bytes &rArr; M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
</UL>

<P><STRONG><a name="[ab]"></a>opSetBaudRate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpu_spi_flash_cfg.o(i.opSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = opSetBaudRate &rArr; DBG_UART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_UART_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Respond
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SPI_Config_Process
</UL>

<P><STRONG><a name="[dc]"></a>op_Pattern4ColorBarGrayScaleH</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, gpu_cfg_pattern.o(i.op_Pattern4ColorBarGrayScaleH))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = op_Pattern4ColorBarGrayScaleH &rArr; pattern_h_grayscale_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_h_grayscale_buf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[db]"></a>op_Pattern4ColorBarGrayScaleV</STRONG> (Thumb, 556 bytes, Stack size 96 bytes, gpu_cfg_pattern.o(i.op_Pattern4ColorBarGrayScaleV))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = op_Pattern4ColorBarGrayScaleV &rArr; pattern_grayscale_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d5]"></a>op_Pattern8ColorBarH_BBRGWCYM</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, gpu_cfg_pattern.o(i.op_Pattern8ColorBarH_BBRGWCYM))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_Pattern8ColorBarH_BBRGWCYM &rArr; pattern_h_8colorbar_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_h_8colorbar_buf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d6]"></a>op_Pattern8ColorBarV_BBRGWCYM</STRONG> (Thumb, 324 bytes, Stack size 52 bytes, gpu_cfg_pattern.o(i.op_Pattern8ColorBarV_BBRGWCYM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_Pattern8ColorBarV_BBRGWCYM &rArr; pattern_WriteLineOneDot
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d8]"></a>op_PatternChecker_BlackWhite</STRONG> (Thumb, 578 bytes, Stack size 108 bytes, gpu_cfg_pattern.o(i.op_PatternChecker_BlackWhite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = op_PatternChecker_BlackWhite &rArr; pattern_checker_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_checker_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d2]"></a>op_PatternColorOutline</STRONG> (Thumb, 292 bytes, Stack size 76 bytes, gpu_cfg_pattern.o(i.op_PatternColorOutline))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_PatternColorOutline &rArr; pattern_crosstalk_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_crosstalk_buf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d7]"></a>op_PatternCrosstalk_BlackWhite</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, gpu_cfg_pattern.o(i.op_PatternCrosstalk_BlackWhite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = op_PatternCrosstalk_BlackWhite &rArr; pattern_crosstalk_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_crosstalk_buf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[da]"></a>op_PatternFlickerColumnInversion</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, gpu_cfg_pattern.o(i.op_PatternFlickerColumnInversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = op_PatternFlickerColumnInversion &rArr; pattern_WriteLineOneDot
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d9]"></a>op_PatternFlickerOneDot</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, gpu_cfg_pattern.o(i.op_PatternFlickerOneDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_PatternFlickerOneDot &rArr; pattern_WriteLineOneDot
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d3]"></a>op_PatternGrayScaleH</STRONG> (Thumb, 288 bytes, Stack size 108 bytes, gpu_cfg_pattern.o(i.op_PatternGrayScaleH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = op_PatternGrayScaleH &rArr; pattern_grayscale_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_wr_ddr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_grayscale_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d4]"></a>op_PatternGrayScaleV</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, gpu_cfg_pattern.o(i.op_PatternGrayScaleV))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_PatternGrayScaleV &rArr; pattern_WriteLineOneDot
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[d1]"></a>op_PatternPureColorThroughDDR</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, gpu_cfg_pattern.o(i.op_PatternPureColorThroughDDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = op_PatternPureColorThroughDDR &rArr; pattern_WriteLineOneDot
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineOneDot
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_ShowMode
</UL>

<P><STRONG><a name="[13c]"></a>pat1</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, main.o(i.pat1))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = pat1 &rArr; DispNumber &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; Address_set &rArr; LCD_DataWrite &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Frame
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispNumber
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arm_Get_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>pattern_WriteLineBuf256Pixel</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, gpu_cfg_pattern.o(i.pattern_WriteLineBuf256Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pattern_WriteLineBuf256Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternPureColorThroughDDR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleV
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerOneDot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerColumnInversion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternCrosstalk_BlackWhite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternColorOutline
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarV_BBRGWCYM
</UL>

<P><STRONG><a name="[142]"></a>pattern_WriteLineOneDot</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, gpu_cfg_pattern.o(i.pattern_WriteLineOneDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pattern_WriteLineOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternPureColorThroughDDR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleV
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerOneDot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternFlickerColumnInversion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternCrosstalk_BlackWhite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternColorOutline
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarV_BBRGWCYM
</UL>

<P><STRONG><a name="[143]"></a>pattern_checker_buf</STRONG> (Thumb, 138 bytes, Stack size 36 bytes, gpu_cfg_pattern.o(i.pattern_checker_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pattern_checker_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternChecker_BlackWhite
</UL>

<P><STRONG><a name="[144]"></a>pattern_crosstalk_buf</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, gpu_cfg_pattern.o(i.pattern_crosstalk_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pattern_crosstalk_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternCrosstalk_BlackWhite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternColorOutline
</UL>

<P><STRONG><a name="[13f]"></a>pattern_grayscale_buf</STRONG> (Thumb, 216 bytes, Stack size 52 bytes, gpu_cfg_pattern.o(i.pattern_grayscale_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pattern_grayscale_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleH
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleV
</UL>

<P><STRONG><a name="[13e]"></a>pattern_grayscale_wr_ddr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpu_cfg_pattern.o(i.pattern_grayscale_wr_ddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pattern_grayscale_wr_ddr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternGrayScaleH
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternCrosstalk_BlackWhite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternColorOutline
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PatternChecker_BlackWhite
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarH_BBRGWCYM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleV
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleH
</UL>

<P><STRONG><a name="[140]"></a>pattern_h_8colorbar_buf</STRONG> (Thumb, 166 bytes, Stack size 36 bytes, gpu_cfg_pattern.o(i.pattern_h_8colorbar_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pattern_h_8colorbar_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern8ColorBarH_BBRGWCYM
</UL>

<P><STRONG><a name="[13d]"></a>pattern_h_grayscale_buf</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, gpu_cfg_pattern.o(i.pattern_h_grayscale_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pattern_h_grayscale_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Pattern4ColorBarGrayScaleH
</UL>

<P><STRONG><a name="[145]"></a>reset_lcd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pport_spi.o(i.reset_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O_SSD2828_RESET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pet
</UL>

<P><STRONG><a name="[13b]"></a>start_pet</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, main.o(i.start_pet))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = start_pet &rArr; Gpu_DisplayCfg &rArr; GPU_set_PLL_factor &rArr; gpu_reconfig_pll &rArr; gpu_pll_lock_lookup &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_lcd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Beep
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ssd2828_ID_OK_check_CmdMode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IP_Card_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Logo_Disp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPU_StartUpBoot_Done
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpu_DisplayCfg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GPU_Version
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GPU_DateTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_LogicWorkStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Connection_Check
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindALLBMP_Entry
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBPB_Param
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Window
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Frame
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHexChar
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandMode_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInitErrorProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
</UL>

<P><STRONG><a name="[14a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
</UL>

<P><STRONG><a name="[17b]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Curr
</UL>

<P><STRONG><a name="[14c]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[14b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[14d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[114]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[130]"></a>VSPN_WriteReg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vspn_ctrl.o(i.VSPN_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VSPN_WriteReg &rArr; VSPN_I2C_Write8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Write8Bit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_TestAck
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Stop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_SetVSPVoltage
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_SetVSNVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSPN_OutOn
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
